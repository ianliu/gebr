<chapter
   xmlns="http://docbook.org/ns/docbook"
   xmlns:xi="http://www.w3.org/2001/XInclude"
   xmlns:xlink="http://www.w3.org/1999/xlink"
   lang="en"
   version="5.0"
   xml:id="flows_tab_advanced">

  <title>The <guilabel>Flows</guilabel> tab: advanced topics</title>


  <section xml:id="flows_import_flow">
    <title>Importing and exporting flows</title>

    <para>Although GêBR continuously saves all modifications made to flows as well as to projects and
    lines, sometimes it is useful to dump flows to file. This can be used to share flows among users, for
    instance, or to generate backups.</para>

    <para>Import and Export actions are accessible through the
    <menuchoice><guimenu>More</guimenu><guisubmenu>Import</guisubmenu></menuchoice> and
    <menuchoice><guimenu>More</guimenu><guisubmenu>Export</guisubmenu></menuchoice> on toolbar.</para>

    <para>To export flows, select as many flows as you want with help of the mouse and keys
    <keycap>Ctrl</keycap> (for single selection) or <keycap>Shift</keycap> (for multiple selection), then
    activate the export option at <menuchoice><guimenu>More</guimenu></menuchoice> menu. A dialog box
    <guilabel>Save flow</guilabel> will pop up, allowing the user to browse for the target directory and
    chose the filename (GêBR will automatically determine the extension <filename
    class="exension">flwx</filename>).</para>

    <para>In case of importing flows from a file, the imported flows will be listed along with the other
    flows of the active line, at the bottom of the list and with the suffix
    <emphasis>(Imported)</emphasis> added.</para>

  </section>

  <section xml:id="flows_dictionary_variables">
    <title>Using variables</title>
    
    <para>It is usual in the course of processing data that many flows may depend on some fundamental
    quantities, like acquisition parameters, for example. Those quantities may be provided explicitly to
    each flow. Consider however a scenario where one or some of those quantities have to be redefined. The
    user would have to go through all flows which depend on them making the necessary updates. Despite
    possible, this procedure is error-prone and time consuming. A better approach would be centralize the
    definition of those common quantities, in such a way that a change on them would be automatically
    propagated to all flows where they are employed. This central place for definition of these
    <emphasis>quantities</emphasis> is the <emphasis role="bold">Dictionary of
    variables</emphasis><indexterm><primary>Dictionary of variables</primary></indexterm>.</para>

    <section xml:id="technical_aspects_variables">
      <title>Variables</title>

      <para><emphasis role="bold">Variables</emphasis><indexterm><primary>Variable</primary></indexterm>
      are ways to hold numbers or text strings. Numerical variables are defined by arithmetic expressions
      involving constants and/or other numerical variables. Text string variables are defined by
      concatenating constant text strings with other numerical or text string variables.</para>

      <para>Variables may be used to define programs' parameters directly or by means of inline
      expressions, i.e. expressions written directly on the parameter's entry box.</para>
      
      <para>The <guilabel>Dictionary of variables</guilabel> is to interface to handle all the
      variables. It is accessed through the icon <guiicon><inlinemediaobject><imageobject><imagedata
      fileref="../../common-images/botao_dicionario_projeto.png"
      /></imageobject></inlinemediaobject></guiicon>, in the
      <menuchoice>><guimenu>More</guimenu></menuchoice> menu of toolbars of the <guilabel>Projects and
      Lines</guilabel> and <guilabel>Flows </guilabel> tabs.</para>

      <para>GêBR has three levels of organization (see <xref linkend="concepts_elements"/>).  The
      variables, thus, have three levels of visibility:</para>
      <itemizedlist>
        <listitem>Project's variables are visible to all flows associated to lines of the
        project;</listitem>
        <listitem>Line's variables are visible to all its flows;</listitem>
        <listitem>Flow's variables are just visible to the flow itself.</listitem>
      </itemizedlist>
      
      <para>
        <figure>
          <title>Dictionary of variables</title>
          <mediaobject>
            <imageobject>
	      <imagedata fileref="../images/GeBR_dictionary_variables.png"
			 contentwidth="559px" contentdepth="386px" />
            </imageobject>
          </mediaobject>
          <caption>A variable with a value may be used with different
            metrics throughout the flows. Creating a variable for each
            metric can help in this task. GêBR shows the computed
            value when the user passes the pointer over the icon
            <guiicon><inlinemediaobject><imageobject>
                  <imagedata fileref="../../common-images/integer-icon.png" />
	    </imageobject></inlinemediaobject></guiicon>.
	    Note that defining distance_cm depending on
            distance is valid because distance had been defined
            before.
          </caption>
        </figure>
      </para>

      <para>The dictionary validates the variables dynamically, revalidating and recalculating them as
      soon as anything is changed in dictionary. Programs with errors are automatically revalidated too
      (see <xref linkend="flows_change_program_state" />).
      </para>

      <para>Positioning the pointer over the icon of the variable's type, the user can check the solved
      expression and see the actual value of the variable. If the <guilabel>Dictionary of
      variables</guilabel> finds an error among the variables, it is going to exhibit the icon
      <guiicon><inlinemediaobject><imageobject>
	      <imagedata fileref="../../common-images/icone_nao_configurado.png" />
	</imageobject></inlinemediaobject></guiicon> and an explanation of the error.  Reordering the
	variables of the dictionary can be done by drag and drop.  Since a variable can just use another
	variable above it, this feature turns the declaration of variables more flexible and
	dynamic.</para>


      <para>Besides variables and expressions, some predefined functions can be used:
      </para>

      <table>
        <title>Available functions</title>
        <tgroup cols='2'>
          <thead>
            <row>
              <entry>Function</entry>
              <entry>Sintax</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Square root</entry>
              <entry>sqrt (<emphasis>value</emphasis>)</entry>
            </row>
            <row>
              <entry>Sine</entry>
              <entry>s (<emphasis>value</emphasis>)</entry>
            </row>
            <row>
              <entry>Cosine</entry>
              <entry>c (<emphasis>value</emphasis>)</entry>
            </row>
            <row>
              <entry>Arctangent</entry>
              <entry>a (<emphasis>value</emphasis>)</entry>
            </row>
            <row>
              <entry>Natural logarithm</entry>
              <entry>l (<emphasis>value</emphasis>)</entry>
            </row>
            <row>
              <entry>Exponential</entry>
              <entry>e (<emphasis>value</emphasis>)</entry>
            </row>
            <row>
              <entry>Bessel</entry>
              <entry>j (<emphasis>order, value)</emphasis></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>The character <emphasis role="bold">[</emphasis> (open bracket) is used to see all the
      available variables for auto-completion while writing an expression.</para>

      <para>Navigate over the fields can be done by using the keys 
        <keycap>Enter</keycap>, 
        <keycap>Tab</keycap> or with the 
        <mousebutton>Left button of the mouse</mousebutton>.
      </para>

      <tip>
	<para>To use the variables in text entries, the variable name need to be embraced by square
	brackets: <emphasis role="bold">[</emphasis> name-of-the-variable <emphasis
	role="bold">]</emphasis>.</para>

	<para>To insert a literal square bracket in a text entry, double it, that is, <emphasis
	role="bold">[[</emphasis> yields is a literal [.</para>
      </tip>

      <example>
	<title>Using the dictionary</title>

	<para>Dictionary is a very useful feature for using a same value multiple times.  It is also
	useful for naming variables, making a flow's parameters more intuitive. For example:
	  <procedure>
	    <step> Import a demo named Making Data.</step>
	    <step> Check the line named Shot Gathers.</step>
	    <step>
	      Open the
	      <guilabel>Dictionary of variables</guilabel>,
	      on <guilabel>Flows tab</guilabel>.
	    </step>
	  </procedure>
	</para>

	<para>It can be seen that:
	  <itemizedlist>
	    <listitem>Some of the variables are line's variables (width,
	      height...). Changing width and weight, all images generated by X
	      Image
	      (on this line) will be changed according to the new value set.
	      Instead of setting each new value, all values can be changed at
	      once.
	    </listitem>
	    <listitem>
	      Still on Shot Gathers, select the flow Single Shot Sixty
	      Degrees. By
	      checking
	      <guilabel>Dictionary of variables</guilabel>,
	      it's seen that there are some variables related to this flow
	      and these variables are
	      <emphasis>only</emphasis>
	      used on this flow.
	      Also, there are some variables used twice (like dz). It's important to
	      check
	      that the names of each variable represent a meaning on its context : d
	      (z or x)
	      are related to sampling interval; f (z or x) are related to first
	      sample.
	    </listitem>
	  </itemizedlist>
	</para>
      </example>
    </section>
  </section>


  <section xml:id="flows_loop">
    <title>Flows with loops</title>

    <para>The notion of a loop refers to a series of commands that continues to repeat over and over
    again, possibly changing a little, until a condition is met.  For example, suppose the user needs to
    extract many common-offset sections of a data. Instead of writing a flow to extract each common-offset
    section individually, or refurbish a base flow, changing manually its target offset, a loop over the
    offset could be used to sequentially extract all common-offset sections.</para>

    <para>The <emphasis>Loop</emphasis><indexterm><primary>Loop</primary></indexterm> is a special menu
    from the category <emphasis role="bold">Loops</emphasis> that has a totally different usage compared
    to the remaining menus of GêBR. Here these differences are presented.</para>

    <para>Whenever the Loop is added, it appears on the top of the flow. That happens to indicate that the
    flow is going to be executed more than once, according to the parameters set for loop. (see
    <xref linkend="flows_editing_parameters" /> for further details).</para>

    <figure>
      <title>Loop program</title>
      <mediaobject>
	<caption>Screenshot of program <emphasis>Loop</emphasis>, added
	  to a flow and properly configured.</caption>
	<imageobject>
	  <imagedata fileref="../images/GeBR_flow_editor_loop.png" 
		     contentwidth="284px" contentdepth="147px" />
	</imageobject>
      </mediaobject>
    </figure>

    <para>After the <emphasis>Loop</emphasis> is added, a new variable, the <emphasis
    role="bold">iter</emphasis>, is available (see <xref linkend="flows_dictionary_variables" />).  The
    value of this special variable is modified on each iteration (increasing or decreasing), according to
    the parameters set.</para>

    <figure>
      <title>Loop parameters</title>
      <mediaobject>
	<caption>Screenshot of the edition from parameters
	  of <emphasis>Loop</emphasis> program, with a simple example of
	  parameters setting.</caption>
	<imageobject>
	  <imagedata fileref="../images/GeBR_flow_editor_loop_parameters.png" 
		     contentwidth="460px" contentdepth="280px" />
	</imageobject>
      </mediaobject>
    </figure>

    <para>For instance, the output of each step of the Loop can be defined to a file with a name
    identified by the step, output-<emphasis>&lt;number-of-steps&gt;</emphasis> (see <xref
    linkend="fig_flow_editor_loop_output"/>).</para>

    <figure xml:id="fig_flow_editor_loop_output">
      <title>Usage of iter variable</title>
      <mediaobject>
	<imageobject>
	  <imagedata fileref="../images/GeBR_flow_editor_loop_output.png"
		     contentwidth="281px" contentdepth="150px" />
	</imageobject>
      </mediaobject>
      <caption>This flow, with a Loop with 3 steps, is going to throw the results to three different
      files, identified by the step of the loop (output-1, output-2 and output-3).  Note that, since the
      output file expects a text string, the iter variable is embraced by square brackets and the output
      filename is the concatenation of a constant text string, <emphasis>/tmp/output-</emphasis>, and the
      value of the numerical variable iter.</caption>
    </figure>
  </section>

  <section xml:id="flows_snapshots">
    <title>Snapshot of a flow</title>

    <para>Tune all program's parameters of a flow can be time consuming. Usually the best setup of
    parameters is only found by trial and error. It could be distressful have to change a good flow's
    setup to try a different one, in aim of found something better. To alleviate this stress, GêBR offers
    the <emphasis role="bold">snapshot</emphasis><indexterm><primary>Snapshot</primary><secondary>of a
    flow</secondary></indexterm> feature. A snapshot is a record of the complete flow's state at the time,
    including all programs that build the flow, all program parameter values, the state of the dictionary
    of variables, and input and output files. After take a snapshot, the user can change anything in the
    flow's setup without the fear to corrupt the flow, because it is always possible to revert the flow to
    the state it was when the snapshot was taken.</para>

    <para>Snapshot can also be used to keep equally important different states of a flow. For instance,
    consider a flow to extract a common-offset sections from a data set. One valuable setup is the one that
    extract the common-offset section for the smallest offset, while other important setup is the one to
    extract the common-offset section for the biggest offset. Both states can be saved by means of
    snapshots. Furthermore, both snapshots can be executed at once.</para>

    <para>An alternative to snapshots would be is to save many different flows, one for each version, but
    with the drawback of having a crowded flow's list.</para>

    <section xml:id="flows_taking_snapshots">
      <title>Taking snapshots</title>
      <indexterm><primary>Snapshot</primary><secondary>taking snapshot</secondary></indexterm>

      <para>To take snapshots of a flow, on the toolbar of <guilabel>Flows</guilabel> tab, use the option
      <menuchoice><guimenu>More</guimenu><guisubmenu>Take a snapshot</guisubmenu></menuchoice> or press
      <keycap>Ctrl+S</keycap>. A dialog box will appear requesting an one-sentence description of the
      snapshot. That description is further used to identify it as long as the timestamp of the
      snapshot.</para>

      <para>To see the saved snapshots, just left-click on 
	<guiicon>
	  <inlinemediaobject>
	    <imageobject>
	      <imagedata fileref="../../common-images/photos.png" />
	    </imageobject>
	  </inlinemediaobject>
	</guiicon> by the title of the flow in the flow's list.
      </para>
    </section>

    <section xml:id="flows_snapshots_actions">
      <title>Snapshot actions</title>
      <indexterm><primary>Snapshot</primary><secondary>actions</secondary></indexterm>

      <para>The graph below indicates from which version each snapshot was derived from. The start of
      arrow indicates the origin and the end indicates the derived version. The special mark
      <emphasis>Now</emphasis> highlights from which snapshot the actual state of the flow derives.</para>

      <figure>
	<title>Snapshots on GêBR</title>
	<mediaobject>
	  <caption>In this view, the user can perform various actions in the snapshots,
	    like revert, delete and run</caption>
	  <imageobject>
	    <imagedata fileref="../images/GeBR_snapshot_example.png"
		       contentwidth="566px" contentdepth="527px" />
	  </imageobject>
	</mediaobject>
      </figure>

      <para>In this view, it is possible select as many snapshots as necessary by just clicking over each
      snapshots. To deselect a snapshot click again over it. To clear the entire selection click on the
      white area in this view.</para>

      <para>Any action taken will affect all selected snapshots. Possible actions
      are <emphasis role="bold">Revert</emphasis>, <emphasis role="bold">Delete</emphasis> and <emphasis
      role="bold">Run</emphasis>.</para>

      <itemizedlist>
	<listitem>
	  <emphasis role="bold">Revert</emphasis>

	  <para><emphasis>Revert</emphasis> means that the flow will be restored to how it was at the
	  moment the snapshot was taken. If the actual state of flow is unsaved by means of a snapshot,
	  prior the revert action the user is inquired about taking a snapshot of the actual state of the
	  flow or discarding this unsaved state and then proceed.</para>

	  <figure>
	    <title>Dialog of Reverting modified flow</title>
	    <mediaobject>
	      <caption>Two option are avaliable to proceed.</caption>
	      <imageobject>
		<imagedata fileref="../images/GeBR_reverting_modified.png"
			   contentwidth="319px" contentdepth="293px" />
	      </imageobject>
	    </mediaobject>
	  </figure>

	</listitem>

	<listitem>
	  <emphasis role="bold">Delete</emphasis>

	  <para>Delete a snapshot is a permanent action, that cannot be undone. Whenever a snapshot is
	  deleted its descendents are linked to the predecessor of the deleted snapshot to keep the idea
	  of ascendence.</para>

	  <para>The <keycap>Delete</keycap> key can be used instead the context menu option.</para>

	</listitem>

	<listitem>
	  <emphasis role="bold">Run</emphasis>

	  <para>Running a snapshot is like running a flow (see <xref linkend="flows_execute_flow" />).
	  The advantage of doing this is the possibility of executing a snapshot without having to revert
	  to it. Thus, saved flows can be tested without changing the current one. As with flows,
	  <keycap>Ctrl+R</keycap> runs the selected snapshots one after another;
	  <keycap>Ctrl+Shift+R</keycap> runs the selected snapshots parallely (keybind activated just if
	  multiple snapshots are selected).</para>

	</listitem>
      </itemizedlist>

    </section>

    <example>
      <title>Using snapshots</title>

      <para>Take the program SU Plane for that example. That program create common offset with up to 3
      planes, and there are two possible output options for that flow: image plot, using program X Image
      or postscript image, using PS Image.</para>

      <para>To solve this issue (two possible outputs for a flow) without the need to create two separate
      flows with small differences, it is possible to take two snapshots: one for image plot, and the
      other for postscript.</para>

      <para>
	To do that, following the steps below:
	<procedure>
	  <step>Assemble the flow with two programs,
	    SU Plane and X Image.
	  </step>
	  <step>Takes a snapshot of this flow, with some description
	    like "Common offset with image plot".
	  </step>
	  <step>Remove the program X Image of the original flow,
	    and add a program PS Image, with some output file like "plot.ps".
	  </step>
	  <step>Takes a snapshot of this new flow, with description
	    like "Common offset with postscript image".
	  </step>
	</procedure>
	Now, with only one flow can run two different plots
	for the data generated from SU Plane.
      </para>
    </example>
  </section>
  
  <section xml:id="flows_edit_comments_flow">
    <title>Report</title>

    <para>The option <menuchoice><guimenu>More</guimenu><guisubmenu>Include user's
    commentary</guisubmenu></menuchoice> allows the user to add comments
    <indexterm><primary>Report</primary><secondary>of a flow</secondary></indexterm> about the selected
    flow, just like the option presented in the <guilabel>Projects and Lines</guilabel> tab.  Analogously,
    the option <menuchoice><guimenu>More</guimenu><guisubmenu>View Report</guisubmenu></menuchoice> allows
    the user to visualize the report of the current flow. The difference is that the line's report can
    include the flow's report.  Consult <xref linkend="projects_lines_report" />.</para>

  </section>
</chapter>
