<?xml version="1.0" encoding="utf-8"?>

<section
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  lang="en"
  version="5.0"
  xml:id="additional_features">

  <title>Additional features</title>
  <section xml:id="menu">
    <title>The 
      <guimenu>Action</guimenu> menu</title>
    <para>From the 
      <guimenu>Actions</guimenu> menu you can access your 
      <guimenuitem>Preferences</guimenuitem> and configure 
      <guimenuitem>Servers</guimenuitem>. If your enthusiasm for GêBR has lead you to read the
      whole manual, you have probably used almost all available features found in these options.
      But just in case, below you will find the documentation for these options.</para>
    <section>
      <title>Preferences</title>
      <para>The details you provide in the 
        <guimenuitem>Preferences</guimenuitem> dialog box will be adopted as the default by GêBR.
        Specifically:</para>
      <itemizedlist>
        <listitem>
          <para>
            <guilabel>User name:</guilabel> will be used as the default for 
            <guilabel>Author:</guilabel> when you create Projects, Lines and Flows.</para>
        </listitem>
        <listitem>
          <para>
            <guilabel>Email:</guilabel> will be used as the default for 
            <guilabel>Email:</guilabel> when you create Projects, Lines and Flows.</para>
        </listitem>
        <listitem>
          <para>
            <guilabel>User's menus directory:</guilabel> will be the default directory where 
            <emphasis>GêBR's Menus</emphasis> are maintained (
            <filename class="extension">mnu</filename> files).</para>
        </listitem>
      </itemizedlist>
      <figure>
        <mediaobject>
          <caption>Preferences menu opens a dialog box where you edit the user name, email,
            menu's directory and the HTML editor.</caption>
          <imageobject>
            <imagedata fileref="../images/GeBR_preferences.png" />
          </imageobject>
        </mediaobject>
      </figure>
      <para>Advanced settings in Preferences menu expands the dialog box where you edit the
        Maestro Server and HTML editor.</para>
      <para>
        <emphasis role="bold">Advanced Settings</emphasis>
      </para>
      <mediaobject>
        <caption>Advanced Settings of Preferences menu</caption>
        <imageobject>
          <imagedata fileref="../images/GeBR_preferences_advanced.png" />
        </imageobject>
      </mediaobject>
      <itemizedlist>
        <listitem>
          <para>Maestro Server: will be the default for Maestro Server when you start GêBR, the
            localhost is the default for Maestro Server when you connect GêBR for the first
            time.</para>
        </listitem>
        <listitem>
          <para>HTML editor: the default text editor that GêBR will open when creating reports on
            Projects, Lines and Flows.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>
  <section xml:id="servers_configuration">
    <title>Servers configuration</title>
    <para>GêBR can take benefit of the resources of multiple machines. To handle it, GêBR is
      segmented in three layers:</para>
    <itemizedlist>
      <listitem>The host machine (GêBR-client), from where the user sends requests</listitem>
      <listitem>An intermediate layer (GêBR-maestro), where all the jobs are coordinated</listitem>
      <listitem>Executors (GêBR-daemons), where the jobs are executed</listitem>
    </itemizedlist>
    <mediaobject>
      <caption>Layers of execution of GêBR</caption>
      <imageobject>
        <imagedata fileref="../images/GeBR_servers_maestro_diagram.png" />
      </imageobject>
    </mediaobject>
    <para>GêBR can be connected to one maestro at once. Each maestro, in turn, can be connected
      to many daemons. To ease the task of handling of files by the maestro, one requirement is that
      all the daemons must be in the same Network File System (NFS).</para>
    <para>The Servers Interface has three parts: 
      <itemizedlist>
        <listitem>
          <para>Maestro - central unit of coordination of multiple machines</para>
        </listitem>
        <listitem>
          <para>Servers - choose the servers associated to the current maestro</para>
        </listitem>
        <listitem>
          <para>Groups of Servers - configure the groups of daemons on the current maestro</para>
        </listitem>
    </itemizedlist></para>
    <section>
      <title>Maestro</title>
      <mediaobject>
        <caption>Maestro entry</caption>
        <imageobject>
          <imagedata fileref="../images/GeBR_servers_maestro_entry.png" />
        </imageobject>
      </mediaobject>
      <para>In the upper part of the Servers Interface, there is an entry in which the user can put
        the desired machine to use as maestro. A requirement is that the package GêBR-maestro must be
        installed on that machine. The state of the connection between GêBR and the maestro is shown
        by the right-side icon: 
        <itemizedlist>
          <listitem><para>connected (<inlinemediaobject>
                <imageobject>
                  <imagedata fileref="../../common-images/gtk-connect.png" />
                </imageobject>
          </inlinemediaobject>)</para></listitem>
          <listitem><para>disconnected (<inlinemediaobject>
                <imageobject>
                  <imagedata fileref="../../common-images/gtk-disconnect.png" />
                </imageobject>
          </inlinemediaobject>)</para></listitem>
          <listitem><para>error (<inlinemediaobject>
                <imageobject>
                  <imagedata fileref="../../common-images/gtk-dialog-warning.png" />
                </imageobject>
          </inlinemediaobject>)</para></listitem>
      </itemizedlist></para>
    </section>
    <section>
      <title>Servers</title>
      <mediaobject>
        <caption>Servers interface</caption>
        <imageobject>
          <imagedata fileref="../images/GeBR_servers_daemons.png" />
        </imageobject>
      </mediaobject>
      <para>Once selected a coordinator machine (maestro), the user can associate machines to that
        maestro.</para>
      <para>The lines represent the machines associated to the maestro. Each line has two columns:
        the first column shows if the option Auto-connect is activated or not; the second column
        shows the name (hostname) of the machine. The user can add a new machine by clicking over New
        and entering the name of address of the machine.</para>
    </section>
    <section>
      <title>Groups</title>
      <para>The user can use just a couple of the machines associated to the maestro. Using
        different subsets of machines can be managed through the creation of groups of
        machines.</para>
      <para>In the bottom part of the Servers interface, the user can create/edit daemons groups.
        The functionality is through mouse Drag and Drop.</para>
      <mediaobject>
        <caption>Groups interface</caption>
        <imageobject>
          <imagedata fileref="../images/GeBR_servers_groups_new.png" />
        </imageobject>
      </mediaobject>
      <para>To create a group, the user needs to click over a server in the list and drag it to the
        + icon. A text box is going to be prompted for the name of the group. Groups with same names
        are not accepted.</para>
    </section>
  </section>
  <section
    xml:id="dictionary_variables">

    <title>Variables Dictionary</title>
    <section xml:id="janela_dicionario">
      <title>The dictionary</title>
      <para>The dictionary is a very flexible feature, that can be used in many forms and to many
        ends.</para>
      <para>Now the dictionary accepts expressions as input. This way more complex variables can be
        defined. In this section we will show some examples of variables usage in a flow.</para>
      <para>Follow this simple example of how to define a variable in the dictionary:</para>
      <procedure>
        <step>
          <para>Create a flow and insert a program called 
            <guimenuitem>Echo</guimenuitem>. Echo's basic function is to show text on the screen
            (you can find this program at 
            <guimenu>Shell tools</guimenu> category, at 
            <guilabel>Flow Editor</guilabel> tab).</para>
          <figure>
            <mediaobject>
              <caption>Screenshot of the creation of flow "Example flow".</caption>
              <imageobject>
                <imagedata fileref="../images/exemplo_variaveis_1.png" />
              </imageobject>
            </mediaobject>
          </figure>
          <figure>
            <mediaobject>
              <caption>Screenshot of Flow Editor tab showing the insertion of the Echo
                program</caption>
              <imageobject>
                <imagedata fileref="../images/exemplo_variaveis_2.png" />
              </imageobject>
            </mediaobject>
          </figure>
        </step>
        <step>
          <para>At the 
            <guilabel>Flow Editor</guilabel>, click at button 
            <guiicon>
              <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="../../common-images/botao_dicionario_projeto.png" />
                </imageobject>
              </inlinemediaobject>
            </guiicon> to 
            <emphasis role="bold">edit the variables dictionary</emphasis>.</para>
        </step>
        <step>
          <para>At the window that pops up (
            <guilabel>Variables dictionary for flow</guilabel>), click on 
            <emphasis>New</emphasis> at 
            <emphasis role="bold">Flow</emphasis> scope. Fill the field 
            <emphasis>keyword</emphasis> with the variable's name 
            <emphasis role="bold">var1</emphasis>. Then, press enter to proceed to the next field, 
            <emphasis>Value</emphasis>. Before filling it, you must choose a data type to your new
            variable (
            <guimenuitem>Number</guimenuitem> or 
            <guimenuitem>Text</guimenuitem>), choose 
            <guimenuitem>Number</guimenuitem>. The mouse cursor will be located at field 
            <emphasis>Value</emphasis>. Fill that field with 
            <emphasis role="bold">10</emphasis> and press enter again.</para> The last field is the 
          <emphasis>Comments</emphasis>. Fill it with some description of your newly created
          variable. Remember: The comments are optional, you can leave this field empty if you want. 
          <para>When you finish, your window must look like with this one:</para>
          <figure>
            <mediaobject>
              <caption>Screenshot of the parameters window.</caption>
              <imageobject>
                <imagedata fileref="../images/exemplo_variaveis_3.png" />
              </imageobject>
            </mediaobject>
          </figure>
          <tip>To a better understanding about variables, check section 
            <xref linkend="definindo_variaveis" />.</tip>
          <tip>Positioning the pointer on the icon of the variable type, we can check the solved
            expression.</tip>
          <tip>We can navigate over the fields using the keys 
            <keycap>Enter</keycap>, 
            <keycap>Tab</keycap> or with the 
            <mousebutton>Left button of the mouse</mousebutton>.</tip></step>
      </procedure>
    </section>
    <section xml:id="definindo_variaveis">
      <title>Defining and using variables</title>
      <para>We can use the dictionary to define more complex variables. Using the same idea from
        the creation of variables in 
        <xref linkend="janela_dicionario" />, we can define two more variables:</para>
      <procedure>
        <step>
          <para>Variable named 
            <emphasis role="bold">var2</emphasis>, type 
            <guimenuitem>Number</guimenuitem> and value 
            <emphasis role="bold">var1 + 10</emphasis>.</para>
          <figure>
            <mediaobject>
              <caption>Screenshot of the creation of the variable 
                <emphasis role="bold">var2</emphasis>, using auto-completion.</caption>
              <imageobject>
                <imagedata fileref="../images/exemplo_variaveis_4.png" />
              </imageobject>
            </mediaobject>
          </figure>
        </step>
        <step>
          <para>Variable named 
            <emphasis role="bold">string</emphasis>, of type 
            <guimenuitem>Text</guimenuitem> and value 
            <emphasis role="bold">Variable 2 is equal to [var2]</emphasis>.</para>
          <figure>
            <mediaobject>
              <caption>Screenshot of the creation of variable 
                <emphasis role="bold">string</emphasis> and verification of the result.</caption>
              <imageobject>
                <imagedata fileref="../images/exemplo_variaveis_5.png" />
              </imageobject>
            </mediaobject>
          </figure>
          <tip>To use the variables in fields like 
            <guimenuitem>Text</guimenuitem>, you must put the variable name embraced by square
            brackets 
            <emphasis role="bold">[</emphasis> name-of-the-variable
            <emphasis role="bold">]</emphasis>.</tip>
        </step>
        <step>
          <para>Now we can use the variables in our newly-created "Example Flow".</para>
          <para>In the Flow Editor, double click 
            <guilabel>Echo</guilabel> in the parameters editor window and use the variable 
            <emphasis role="bold">string</emphasis>.</para>
          <figure>
            <mediaobject>
              <caption>Screenshot of the parameters editor of the program Echo with the variable 
                <emphasis role="bold">string</emphasis>.</caption>
              <imageobject>
                <imagedata fileref="../images/exemplo_variaveis_6.png" />
              </imageobject>
            </mediaobject>
          </figure>
        </step>
      </procedure>
      <tip>To validate a field of an expression or a variable, you just need to use the
        key 
        <keycap>Enter</keycap>.</tip>
      <tip>To see all the available variables for auto-completion, we just need to type the
        character 
        <emphasis role="bold">[</emphasis>' (open brackets).</tip>
      <important>
        <para>We can define the visibility of the variables, managing them in the lists 
          <guilabel>Project</guilabel>, 
          <guilabel>Line</guilabel> and 
          <guilabel>Flow</guilabel>. Variables from the list 
          <guilabel>Project</guilabel> are visible to 
          <emphasis role="bold">every flow</emphasis> of every line of the chosen project.
          <guilabel>Lines</guilabel> are visible just for the 
          <emphasis role="bold">flows of the selected flow</emphasis>. Variables from the list 
          <guilabel>Flows</guilabel> are visible just for the 
          <emphasis role="bold">chosen flow</emphasis>.</para>
      </important>
    </section>
    <section xml:id="variavel_iter">
      <title>The variable iter</title>
      <para>As we saw in the section 
        <xref linkend="flow_editor_loop" />, GêBR allows the use of loops, through the program 
        <guimenuitem>Loop</guimenuitem>. With this program, we have access to a special variable
        called 
        <emphasis role="bold">iter</emphasis>. Then we can show an example of the use of this
        variable:</para>
      <procedure>
        <step>
          <para>Suppose we want to know in which week days the turns of the next 5 years will be. To
            this end, we need the calendar of December from these 5 years. We are going to use the
            program 
            <guimenuitem>Calendar</guimenuitem> (it can be found in the 
            <guimenu>Shell Tools</guimenu> category, in the 
            <guilabel>Flow Editor</guilabel> tab).</para>
          <para>Using the examples about the filling of parameters in section 
            <xref linkend="flow_editor_loop" />, we are going to end up with the variable 
            <emphasis role="bold">iter</emphasis> in the dictionary as in the following window.</para>
          <figure>
            <mediaobject>
              <caption>Screenshot of variable 
                <emphasis role="bold">iter</emphasis> and its solved expression.</caption>
              <imageobject>
                <imagedata fileref="../images/exemplo_iter_1.png" />
              </imageobject>
            </mediaobject>
          </figure>
        </step>
        <step>
          <para>We can define a variable in the dictionary that represents the present year,
            facilitating the process of year choice. We define the variable in the line, with the
            name of 
            <emphasis role="bold">ano_atual</emphasis> and value 
            <emphasis role="bold">2011</emphasis>.</para>
          <figure>
            <mediaobject>
              <caption>Screenshot of variable 
                <emphasis role="bold">ano_atual</emphasis> defined in the dictionary.</caption>
              <imageobject>
                <imagedata fileref="../images/exemplo_iter_2.png" />
              </imageobject>
            </mediaobject>
          </figure>
        </step>
        <step>
          <para>After defining this variable, we improve the parameters of the program 
            <guimenuitem>Loop</guimenuitem>, so the variable 
            <emphasis role="bold">iter</emphasis> has a better behaviour on the purpose of the
            problem.</para>
          <para>In the Initial Value we are going to include a variable 
            <emphasis role="bold">ano_atual</emphasis>. We fill the parameter Step (step of each
            iteration) with 1, since we look for consecutive years. We fill the parameter Total
            number of steps with 5, so the Loop will be repeated five times, covering years 2011 to
            2016.</para>
          <figure>
            <mediaobject>
              <caption>Screenshot of 
                <guimenuitem>Loop</guimenuitem> program with its parameters filled in.</caption>
              <imageobject>
                <imagedata fileref="../images/exemplo_iter_3.png" />
              </imageobject>
            </mediaobject>
          </figure>
          <important>
            <para>The program 
              <guimenuitem>Loop</guimenuitem> can only use variables defined at its Line or
              Project.</para>
          </important>
        </step>
        <step>
          <para>Now we open program 
            <guimenuitem>Calendar</guimenuitem> to fill its parameters. We gonna fill only two
            parameters, Month with value 
            <emphasis>December</emphasis> and Year with the variable 
            <emphasis role="bold">iter</emphasis>.</para>
          <figure>
            <mediaobject>
              <caption>Screenshot of 
                <guimenuitem>Calendar</guimenuitem> program parameters filled in.</caption>
              <imageobject>
                <imagedata fileref="../images/exemplo_iter_4.png" />
              </imageobject>
            </mediaobject>
          </figure>
          <para>We can verify the solved value of the variable 
            <emphasis role="bold">iter</emphasis> through the tooltip of parameter Year 
            <guiicon>
              <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="../images/exemplo_iter_5.png" />
                </imageobject>
              </inlinemediaobject>
            </guiicon> by positioning the pointer over the Year icon. This way, we can verify the which
            years we are walking through.</para>
        </step>
        <step>
          <para>Now, with all the parameters set, we can run the flow (as in section 
            <xref linkend="flows_browser_execute_flow" />), to see in which week days the holidays are going to
            be for the next five years.</para>
          <figure>
            <mediaobject>
              <caption>Screenshot of execution of flow, in the tab 
                <guilabel>Job Control</guilabel>.</caption>
              <imageobject>
                <imagedata fileref="../images/exemplo_iter_6.png" />
              </imageobject>
            </mediaobject>
          </figure>
        </step>
      </procedure>
      <para>That was a simple example of 
        <emphasis role="bold">iter</emphasis> variable usage in a flow. We can notice that loops and
        variables ease the execution of repetitive tasks.</para>
    </section>
    <section xml:id="variaveis_recursos">
      <title>Dictionary features</title>
      <para>The dictionary has a big list of resources that increments its functionality. We are
        going to list some of these resources:</para>
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">Function</emphasis>
          </para>
          <para>Besides using variables and expressions, we can use some predefined
            functions:</para>
          <table>
            <title>Available functions</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Function</entry>
                  <entry>Sintax</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>Square root</entry>
                  <entry>sqrt(
                    <emphasis>value</emphasis>)</entry>
                </row>
                <row>
                  <entry>Sine</entry>
                  <entry>s(
                    <emphasis>value</emphasis>)</entry>
                </row>
                <row>
                  <entry>Cosine</entry>
                  <entry>c(
                    <emphasis>value</emphasis>)</entry>
                </row>
                <row>
                  <entry>Arctangent</entry>
                  <entry>a(
                    <emphasis>value</emphasis>)</entry>
                </row>
                <row>
                  <entry>Natural Logarithm</entry>
                  <entry>l(
                    <emphasis>value</emphasis>)</entry>
                </row>
                <row>
                  <entry>Exponencial</entry>
                  <entry>e(
                    <emphasis>value</emphasis>)</entry>
                </row>
                <row>
                  <entry>Bessel</entry>
                  <entry>j(
                    <emphasis>order, value)</emphasis></entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">Drag and Drop</emphasis>
          </para>
          <itemizedlist>
            <listitem>
              <para>We can reorder the dictionary variables through the drag and drop. Since a
                variable can just use another variable above it, this features turns the declaration
                of variables more flexible and dynamic.</para>
              <figure>
                <mediaobject>
                  <caption>Screenshot of the flow execution in the tab 
                    <guilabel>Job Control</guilabel>.</caption>
                  <imageobject>
                    <imagedata fileref="../images/recurso_dict_1.png" />
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">Dynamic Validation</emphasis>
          </para>
          <itemizedlist>
            <listitem>
              <para>The dictionary validates the variables in a dynamic way, revalidating them you
                change the name, the value and the position. On this way, it is much simpler to keep
                everything in order.</para>
              <para>Programs with variables with errors are automatically revalidated, changing its
                state configuration (see 
                <xref linkend="flow_editor_change_state_program" />).</para>
              <figure>
                <mediaobject>
                  <caption>Screenshot of the variable 
                    <emphasis role="bold">ano_atual</emphasis> using a non-existent variable in its
                    expression.</caption>
                  <imageobject>
                    <imagedata fileref="../images/recurso_dict_2.png" />
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
          </itemizedlist>
          <tip>Every field, from program parameters or variables, is going to exhibit the icon 
            <guiicon>
              <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="../../common-images/icone_nao_configurado.png" />
                </imageobject>
              </inlinemediaobject>
          </guiicon>, and an explanation of the error.</tip>
        </listitem>
      </itemizedlist>
    </section>
  </section>
  <section xml:id="execution_log">
    <title>The execution log</title>
    <para>GêBR remembers most of the users actions, as well as the results of these actions, in
      the <emphasis>execution log</emphasis>. This log is shown at the bottom of the main window, which
      can be presented in the collapsed form (default) or the expanded form like the window
      below.</para>
    <figure>
      <mediaobject>
        <caption>At the bottom of GêBR's main window you will find the execution log, which
          displays information on all of GêBR processes.</caption>
        <imageobject>
          <imagedata fileref="../images/janela_log_execucao.png" />
        </imageobject>
      </mediaobject>
    </figure>
    <tip>
      <para>In 
        <menuchoice>
          <guimenu>Actions</guimenu>
          <guimenuitem>Preferences</guimenuitem>
        </menuchoice> at the bottom of the dialog box, we can see the box 
        <guilabel>Load past-execution log</guilabel>. By checking this box we choose to exhibit the
        whole log, including actions from past dates. By leaving the box unchecked we choose to
        have a compact log, which only shows actions that have taken place since GêBR's last
        initialization.</para>
    </tip>
  </section>
  <section xml:id="import_samples">
    <title>Sample projects</title>
    <para>In the Help menu, besides the general Help section, we can import available
      samples:</para>
    <figure>
      <mediaobject>
        <caption>Screenshot of the Samples Menu</caption>
        <imageobject>
          <imagedata fileref="../images/samples_en.png" />
        </imageobject>
      </mediaobject>
    </figure>
  </section>
</section>
