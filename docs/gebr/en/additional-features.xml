<?xml version="1.0" encoding="utf-8"?>

<section
   xmlns="http://docbook.org/ns/docbook"
   xmlns:xi="http://www.w3.org/2001/XInclude"
   xmlns:xlink="http://www.w3.org/1999/xlink"
   lang="en"
   version="5.0"
   xml:id="additional_features">

  <title>Technical aspects</title>

  <section xml:id="additional_features_infrastructure">
    <title>Intercommunication between players</title>

    <para>GêBR can take benefit of the resources of multiple
      machines. To handle it, GêBR is segmented in three
      layers:</para>

    <itemizedlist>
      <listitem>The local machine (the GêBR graphical interface
	or <emphasis>the client</emphasis>), from where the user sends
	requests.
      </listitem>
      <listitem>An intermediate layer (the Maestro), where all the
	jobs are coordinated.
      </listitem>
      <listitem>Executors (the working machines
      or <emphasis>servers</emphasis>), where the jobs are executed.
      </listitem>
    </itemizedlist>
    <figure>
      <title>GêBR communication model</title>
      <mediaobject>
	<caption>Layers of execution of GêBR.</caption>
	<imageobject>
          <imagedata fileref="../images/GeBR_servers_maestro_diagram.png" />
	</imageobject>
      </mediaobject>
    </figure>

    <note>
      <para>GêBR can be connected to only one Maestro at once. Each
	Maestro, in turn, can be connected to many Servers. However,
	those Servers must share the file system containing the user's
	home directory. This is usually provided by Network File System
	(NFS) infrastructure.
      </para>
    </note>

    <para>GêBR model comprises communications between machines,
      namely:
    </para>

      <itemizedlist>
	<listitem>Between GêBR-client and the Maestro.</listitem>
	<listitem>Between the Maestro and the Servers.</listitem>
      </itemizedlist>

      <para>All connections are performed using Secure Shell (SSH)
	protocol. SSH is intended to provide secure encrypted
	communication over a network. To establish such connections,
	the user may be asked to provide his or her login password
	multiple times. This can be cumbersome, if there are a lot of
	working machines under the Maestro's domain.
      </para>

      <para>The SSH public-key authentication is an alternative method
      to establish connections which eliminates the need for requests
      for passwords. Despite less annoying, this method is equally
      secure. It is based on public-key cryptography, where encryption
      and decryption use public/private key pair for authentication
      purposes. The Maestro knows the public key and only the Client
      knows the associated private key.
      </para>
      
      <para>If you choose GêBR to user public-key authentication by
	checking <guimenuitem>"Use encryption key to automatically
	authenticate the next session"</guimenuitem>, then GêBR will
	create (if not existent) a private/public keys pair and will
	keep the private key and will copy the public key to the
	Maestro. Once this operation is successfully done, your
	authentication on your Maestro will be automatically done
	through public-key. In practical terms it means you will no
	longer need to type your password to connect to that Maestro
	through GêBR. Analogous behaviour occurs in the connection
	between GêBR-Maestro and GêBR-Server.
      </para>
      
      <figure>
	<title>GêBR public-key authentication</title>
	<mediaobject>
	  <caption>Suppose a client wants to establish a connection
	    with a Maestro. The client is requested for login
	    credential, but instead it provides the key associated to
	    the Maestro. The Maestro try to match the client key with
	    one of his own public keys. In positive case, the client
	    is allowed to communicate to that Maestro. Otherwise, it
	    requests for the user's password.</caption>
	  <imageobject>
	    <imagedata fileref="../images/GeBR_public_key_diagram.png" />
	  </imageobject>
	</mediaobject>
      </figure>
      
      <para>Alternatively, you can create the private/public keys pair
	by yourself
	(consult <link xlink:show="new" xlink:href="https://help.ubuntu.com/community/SSH/OpenSSH/Keys">here</link>
	for more information).
      </para>
      
  </section>
  
  <section
     xml:id="dictionary_variables">
    <title>Variables Dictionary</title>
    <section xml:id="janela_dicionario">
      <title>The dictionary</title>
      <para>The dictionary is a very flexible feature, that can be used in many forms and for many
	purposes.</para>
      <para>Now the dictionary accepts expressions as input. Now, It's possible to define more complex variables.
	In this section we will show some examples of variables usage in a flow.</para>
      <para>Follow this simple example of how to define a variable in the dictionary:</para>
      <procedure>
        <step>
          <para>Create a flow and insert a program called 
            <guimenuitem>Echo</guimenuitem>. Echo's basic function is to show text on the screen
            (you can find this program at 
            <guimenu>Shell tools</guimenu> category, at 
            <guilabel>Flow Editor</guilabel> tab).</para>
          <figure>
            <mediaobject>
              <caption>Screenshot of the creation of flow "Example flow".</caption>
              <imageobject>
                <imagedata fileref="../images/exemplo_variaveis_1.png" />
              </imageobject>
            </mediaobject>
          </figure>
          <figure>
            <mediaobject>
              <caption>Screenshot of Flow Editor tab showing the insertion of the Echo
                program</caption>
              <imageobject>
                <imagedata fileref="../images/exemplo_variaveis_2.png" />
              </imageobject>
            </mediaobject>
          </figure>
        </step>
        <step>
          <para>At the 
            <guilabel>Flow Editor</guilabel>, click at button 
            <guiicon>
              <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="../../common-images/botao_dicionario_projeto.png" />
                </imageobject>
              </inlinemediaobject>
            </guiicon> to 
            <emphasis role="bold">edit the variables dictionary</emphasis>.</para>
        </step>
        <step>
          <para>At the window that pops up (
            <guilabel>Variables dictionary for flow</guilabel>), click on 
            <emphasis>New</emphasis> at 
            <emphasis role="bold">Flow</emphasis> scope. Fill the field 
            <emphasis>keyword</emphasis> with the variable's name 
            <emphasis role="bold">var1</emphasis>. Then, press enter to proceed to the next field, 
            <emphasis>Value</emphasis>. Before filling it, you must choose a data type to your new
            variable (
            <guimenuitem>Number</guimenuitem> or 
            <guimenuitem>Text</guimenuitem>), choose 
            <guimenuitem>Number</guimenuitem>. The mouse cursor will be located at field 
            <emphasis>Value</emphasis>. Fill that field with 
            <emphasis role="bold">10</emphasis> and press enter again.</para> The last field is the 
          <emphasis>Comments</emphasis>. Fill it with some description of your newly created
          variable. Remember: The comments are optional, you can leave this field empty if you want. 
          <para>When you finish, your window must look like this one:</para>
          <figure>
            <mediaobject>
              <caption>Screenshot of the parameters window.</caption>
              <imageobject>
                <imagedata fileref="../images/exemplo_variaveis_3.png" />
              </imageobject>
            </mediaobject>
          </figure>
          <tip><para>To a better understanding about variables, check
              section <xref linkend="definindo_variaveis"
			    />.</para></tip>
          <tip><para>Positioning the pointer on the icon of the
              variable type, we can check the solved
              expression.</para></tip>
          <tip><para>We can navigate over the fields using the keys 
              <keycap>Enter</keycap>, 
              <keycap>Tab</keycap> or with the 
              <mousebutton>Left button of the
		mouse</mousebutton>.</para></tip></step>
      </procedure>
    </section>
    <section xml:id="definindo_variaveis">
      <title>Defining and using variables</title>
      <para>We can use the dictionary to define more complex variables. Using the same idea from
        the creation of variables in 
        <xref linkend="janela_dicionario" />, we can define two more variables:</para>
      <procedure>
        <step>
          <para>Variable named 
            <emphasis role="bold">var2</emphasis>, type 
            <guimenuitem>Number</guimenuitem> and value 
            <emphasis role="bold">var1 + 10</emphasis>.</para>
          <figure>
            <mediaobject>
              <caption>Screenshot of the creation of the variable 
                <emphasis role="bold">var2</emphasis>, using auto-completion.</caption>
              <imageobject>
                <imagedata fileref="../images/exemplo_variaveis_4.png" />
              </imageobject>
            </mediaobject>
          </figure>
        </step>
        <step>
          <para>Variable named 
            <emphasis role="bold">string</emphasis>, of type 
            <guimenuitem>Text</guimenuitem> and value 
            <emphasis role="bold">Variable 2 is equal to [var2]</emphasis>.</para>
          <figure>
            <mediaobject>
              <caption>Screenshot of the creation of variable 
                <emphasis role="bold">string</emphasis> and verification of the result.</caption>
              <imageobject>
                <imagedata fileref="../images/exemplo_variaveis_5.png" />
              </imageobject>
            </mediaobject>
          </figure>
          <tip><para>To use the variables in fields like
              <guimenuitem>Text</guimenuitem>, you must put the variable
              name embraced by square brackets
              <emphasis role="bold">[</emphasis> name-of-the-variable
              <emphasis role="bold">]</emphasis>.</para></tip>
        </step>
        <step>
          <para>Now we can use the variables in our newly-created "Example Flow".</para>
          <para>In the Flow Editor, double click 
            <guilabel>Echo</guilabel> in the parameters editor window and use the variable 
            <emphasis role="bold">string</emphasis>.</para>
          <figure>
            <mediaobject>
              <caption>Screenshot of the parameters editor of the program Echo with the variable 
                <emphasis role="bold">string</emphasis>.</caption>
              <imageobject>
                <imagedata fileref="../images/exemplo_variaveis_6.png" />
              </imageobject>
            </mediaobject>
          </figure>
        </step>
      </procedure>
      <tip><para>To validate a field of an expression or a variable,
          you just need to use the
          key <keycap>Enter</keycap>.</para></tip>
      <tip><para>To see all the available variables for
          auto-completion, we just need to type the character
          <emphasis role="bold">[</emphasis>' (open brackets).</para></tip>
      <important>
        <para>We can define the visibility of the variables, managing
          them in the lists
          <guilabel>Project</guilabel>, 
          <guilabel>Line</guilabel> and
          <guilabel>Flow</guilabel>. Variables from the list 
          <guilabel>Project</guilabel> are visible to 
          <emphasis role="bold">every flow</emphasis> of every line of
          the chosen project.
          <guilabel>Lines</guilabel> are visible just for the 
          <emphasis role="bold">flows of the selected
            flow</emphasis>. Variables from the list
          <guilabel>Flows</guilabel> are visible just for the 
          <emphasis role="bold">chosen flow</emphasis>.</para>
      </important>
    </section>
    <section xml:id="variavel_iter">
      <title>The variable iter</title>
      <para>As we saw in the section 
        <xref linkend="flow_editor_loop" />, GêBR allows the use of loops, through the program 
        <guimenuitem>Loop</guimenuitem>. With this program, we have access to a special variable
        called 
        <emphasis role="bold">iter</emphasis>. Then we can show an example of the use of this
        variable:</para>
      <procedure>
        <step>
          <para>Suppose we want to know in which week days the turns of the next 5 years will be. To
            this end, we need the calendar of December from these 5 years. We are going to use the
            program 
            <guimenuitem>Calendar</guimenuitem> (it can be found in the 
            <guimenu>Shell Tools</guimenu> category, in the 
            <guilabel>Flow Editor</guilabel> tab).</para>
          <para>Using the examples about the filling of parameters in section 
            <xref linkend="flow_editor_loop" />, we are going to end up with the variable 
            <emphasis role="bold">iter</emphasis> in the dictionary as in the following window.</para>
          <figure>
            <mediaobject>
              <caption>Screenshot of variable 
                <emphasis role="bold">iter</emphasis> and its solved expression.</caption>
              <imageobject>
                <imagedata fileref="../images/exemplo_iter_1.png" />
              </imageobject>
            </mediaobject>
          </figure>
        </step>
        <step>
          <para>We can define a variable in the dictionary that represents the present year,
            facilitating the process of year choice. We define the variable in the line, with the
            name of 
            <emphasis role="bold">ano_atual</emphasis> and value 
            <emphasis role="bold">2011</emphasis>.</para>
          <figure>
            <mediaobject>
              <caption>Screenshot of variable 
                <emphasis role="bold">ano_atual</emphasis> defined in the dictionary.</caption>
              <imageobject>
                <imagedata fileref="../images/exemplo_iter_2.png" />
              </imageobject>
            </mediaobject>
          </figure>
        </step>
        <step>
          <para>After defining this variable, we improve the parameters of the program 
            <guimenuitem>Loop</guimenuitem>, so the variable 
            <emphasis role="bold">iter</emphasis> has a better behaviour on the purpose of the
            problem.</para>
          <para>In the Initial Value we are going to include a variable 
            <emphasis role="bold">ano_atual</emphasis>. We fill the parameter Step (step of each
            iteration) with 1, since we look for consecutive years. We fill the parameter Total
            number of steps with 5, so the Loop will be repeated five times, covering years 2011 to
            2016.</para>
          <figure>
            <mediaobject>
              <caption>Screenshot of 
                <guimenuitem>Loop</guimenuitem> program with its parameters filled in.</caption>
              <imageobject>
                <imagedata fileref="../images/exemplo_iter_3.png" />
              </imageobject>
            </mediaobject>
          </figure>
          <important>
            <para>The program 
              <guimenuitem>Loop</guimenuitem> can only use variables defined at its Line or
              Project.</para>
          </important>
        </step>
        <step>
          <para>Now we open program 
            <guimenuitem>Calendar</guimenuitem> to fill its parameters. We gonna fill only two
            parameters, Month with value 
            <emphasis>December</emphasis> and Year with the variable 
            <emphasis role="bold">iter</emphasis>.</para>
          <figure>
            <mediaobject>
              <caption>Screenshot of 
                <guimenuitem>Calendar</guimenuitem> program parameters filled in.</caption>
              <imageobject>
                <imagedata fileref="../images/exemplo_iter_4.png" />
              </imageobject>
            </mediaobject>
          </figure>
          <para>We can verify the solved value of the variable 
            <emphasis role="bold">iter</emphasis> through the tooltip of parameter Year 
            <guiicon>
              <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="../images/exemplo_iter_5.png" />
                </imageobject>
              </inlinemediaobject>
            </guiicon> by positioning the pointer over the Year icon. This way, we can verify which
            years we are walking through.</para>
        </step>
        <step>
          <para>Now, with all the parameters set, we can run the flow (as in section 
            <xref linkend="flows_browser_execute_flow" />), to see in which week days the holidays are going to
            be for the next five years.</para>
          <figure>
            <mediaobject>
              <caption>Screenshot of execution of flow, in the tab 
                <guilabel>Job Control</guilabel>.</caption>
              <imageobject>
                <imagedata fileref="../images/exemplo_iter_6.png" />
              </imageobject>
            </mediaobject>
          </figure>
        </step>
      </procedure>
      <para>That was a simple example of 
        <emphasis role="bold">iter</emphasis> variable usage in a flow. We can notice that loops and
        variables ease the execution of repetitive tasks.</para>
    </section>
    <section xml:id="variaveis_recursos">
      <title>Dictionary features</title>
      <para>The dictionary has a big list of resources that increments its functionality. We are
        going to list some of these resources:</para>
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">Function</emphasis>
          </para>
          <para>Besides using variables and expressions, we can use some predefined
            functions:</para>
          <table>
            <title>Available functions</title>
            <tgroup cols='2'>
              <thead>
                <row>
                  <entry>Function</entry>
                  <entry>Sintax</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>Square root</entry>
                  <entry>sqrt(
                    <emphasis>value</emphasis>)</entry>
                </row>
                <row>
                  <entry>Sine</entry>
                  <entry>s(
                    <emphasis>value</emphasis>)</entry>
                </row>
                <row>
                  <entry>Cosine</entry>
                  <entry>c(
                    <emphasis>value</emphasis>)</entry>
                </row>
                <row>
                  <entry>Arctangent</entry>
                  <entry>a(
                    <emphasis>value</emphasis>)</entry>
                </row>
                <row>
                  <entry>Natural Logarithm</entry>
                  <entry>l(
                    <emphasis>value</emphasis>)</entry>
                </row>
                <row>
                  <entry>Exponencial</entry>
                  <entry>e(
                    <emphasis>value</emphasis>)</entry>
                </row>
                <row>
                  <entry>Bessel</entry>
                  <entry>j(
                    <emphasis>order, value)</emphasis></entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">Drag and Drop</emphasis>
          </para>
          <itemizedlist>
            <listitem>
              <para>We can reorder the dictionary variables by drag and drop. Since a
                variable can just use another variable above it, this feature turns the declaration
                of variables more flexible and dynamic.</para>
              <figure>
                <mediaobject>
                  <caption>Screenshot of the flow execution in the tab 
                    <guilabel>Job Control</guilabel>.</caption>
                  <imageobject>
                    <imagedata fileref="../images/recurso_dict_1.png" />
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">Dynamic Validation</emphasis>
          </para>
          <itemizedlist>
            <listitem>
              <para>The dictionary validates the variables in a dynamic way, revalidating them you
                change the name, the value and the position. On this way, it is much simpler to keep
                everything in order.</para>
              <para>Programs with variables with errors are automatically revalidated, changing its
                state configuration (see 
                <xref linkend="flow_editor_change_state_program" />).</para>
              <figure>
                <mediaobject>
                  <caption>Screenshot of the variable 
                    <emphasis role="bold">ano_atual</emphasis> using a non-existent variable in its
                    expression.</caption>
                  <imageobject>
                    <imagedata fileref="../images/recurso_dict_2.png" />
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
          </itemizedlist>
          <tip><para>Every field, from program parameters or
              variables, is going to exhibit the icon
              <guiicon>
		<inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="../../common-images/icone_nao_configurado.png" />
                  </imageobject>
		</inlinemediaobject>
              </guiicon>, and an explanation of the error.</para></tip>
        </listitem>
      </itemizedlist>
    </section>
  </section>
  <section xml:id="additional_features_mpi_support">
    <title>
      Support to MPI programs
    </title>
    
    <para>
      The Message Passing Interface Standard (MPI) is a vendor independent standard library of message passing. The MPI Forum, which includes vendors, researchers, software library developers, and users, apply efforts to establish the the standards. The goal is to establish a portable and flexible standard for message passing programming. The design of MPI tries to match portability, efficiency, and flexibility. Nowadays, it is a widely used standard for writing message passing programs on high performance computers.
    </para>
    <para>
      There are many implementations (flavors) of MPI, but the most widely used are OpenMPI and MPICH2. OpenMPI is an open source implementation and has influence of three earlier approaches: FT-MPI, LA-MPI and LAM/MPI. The MPICH2 is another widely used implementation and is based on the MPI-2.2 standard.
    </para>
    
    <para>
      GêBR supports both OpenMPI and MPICH2. However, MPI programs can only run on servers that support the execution of MPI. Thus, for GêBR support of MPI, the user must have acces to servers/clusters that also support it.
    </para>
    <para>
      In the Server Interface, in the MPI column, an icon indicates that the server of that row supports MPI. Roll over the icon to check the flavors of MPI available on that machine. You will be able to run your program just on machines that support the same flavor as the one used on your program.
    </para>
    <mediaobject>
      <caption>
	The second column indicates the types (flavors) of MPI available in your servers.
      </caption>
      <imageobject>
        <imagedata fileref="../images/GeBR_servers_mpi.png" />
      </imageobject>
    </mediaobject>
    <para>
      To run an MPI program, you must first create a menu in DêBR and choose appropriately the MPI implementation used on your program. Then import it in GêBR. In the Flow Editor tab, if you double-click over the MPI program, you will be able to set the number of processes to be used by that MPI call.
    </para>

    <mediaobject>
      <caption>
	Double clicking over an MPI program you can set the <emphasis>np</emphasis> parameter of MPI.
      </caption>
      <imageobject>
        <imagedata fileref="../images/GeBR_programs_mpi_parameters.png" />
      </imageobject>
    </mediaobject>
    
  </section>
  <section xml:id="execution_log">
    <title>The execution log</title>
    <para>GêBR remembers most of the users actions, as well as the results of these actions, in
      the <emphasis>execution log</emphasis>. This log is shown at the bottom of the main window, which
      can be presented in the collapsed form (default) or the expanded form like the window
      below.</para>
    <figure>
      <mediaobject>
        <caption>At the bottom of GêBR's main window you will find the execution log, which
          displays information on all of GêBR processes.</caption>
        <imageobject>
          <imagedata fileref="../images/janela_log_execucao.png" />
        </imageobject>
      </mediaobject>
    </figure>
    <tip>
      <para>In 
        <menuchoice>
          <guimenu>Actions</guimenu>
          <guimenuitem>Preferences</guimenuitem>
        </menuchoice> at the bottom of the dialog box, we can see the box 
        <guilabel>Load past-execution log</guilabel>. By checking this box we choose to exhibit the
        whole log, including actions from past dates. By leaving the box unchecked we choose to
        have a compact log, which only shows actions that have taken place since GêBR's last
        initialization.</para>
    </tip>
  </section>
  <section xml:id="import_samples">
    <title>Sample projects</title>
    <para>In the Help menu, besides the general Help section, we can import available
      samples:</para>
    <figure>
      <mediaobject>
        <caption>Screenshot of the Samples Menu</caption>
        <imageobject>
          <imagedata fileref="../images/samples_en.png" />
        </imageobject>
      </mediaobject>
    </figure>
  </section>
</section>
