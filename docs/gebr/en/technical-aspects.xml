<?xml version="1.0" encoding="utf-8"?>

<chapter
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  lang="en"
  version="5.0"
  xml:id="technical_aspects">

  <title>Technical aspects</title>

  <section xml:id="intercommunication_between_players">
    <title>Intercommunication between players</title>

    <para>GêBR can take benefit of the resources of multiple
      machines. To handle it, GêBR is segmented in three layers:</para>

    <itemizedlist>
      <listitem>The local machine (the GêBR graphical interface
        or <emphasis>the
        client</emphasis>)<indexterm><primary>GêBR</primary><secondary>the
        interface</secondary></indexterm>, from where the user sends
        requests.
      </listitem>
      <listitem>An intermediate layer (the
        Maestro)<indexterm><primary>Maestro</primary></indexterm>,
        where all the jobs are coordinated.
      </listitem>
      <listitem>Executors (the working
        machines<indexterm><primary>Working
        machine</primary></indexterm>
        or <emphasis>servers</emphasis>), where the jobs are executed.
      </listitem>
    </itemizedlist>

    <note>
      <para>GêBR can be connected to only one Maestro at once. Each
        Maestro, in turn, can be connected to many working
        machines. However, those machines must share the file system
        containing the user's home directory. This is usually provided
        by Network File System (NFS) infrastructure.
      </para>
    </note>

    <para>GêBR model comprises communications between machines (see
      <xref linkend="communication_diagram"/>), namely:
    </para>

    <itemizedlist>
      <listitem>Between GêBR-client and the Maestro.</listitem>
      <listitem>Between the Maestro and the working
      machines.</listitem>
    </itemizedlist>

    <para>All connections are performed using Secure Shell (SSH)
      protocol. SSH is intended to provide secure encrypted
      communication over a network. To establish such connections,
      the user may be asked to provide his or her login password
      multiple times. This can be cumbersome, if there are a lot of
      working machines under the Maestro's domain.
    </para>

    <para>The SSH public-key authentication is an alternative method
      to establish connections which eliminates the need of requests
      for passwords. Despite less annoying, this method is equally
      secure. It is based on public-key cryptography, where encryption
      and decryption use public/private key pair for authentication
      purposes. The Maestro knows the public key and only the Client
      knows the associated private key.
    </para>

    <para>If the user chooses GêBR to use public-key authentication by
      checking "<guimenuitem>Use encryption key to automatically
        authenticate the next session</guimenuitem>", then GêBR will
      create (if not existent) a private/public keys pair and will
      keep the private key and will copy the public key to the
      Maestro. Once this operation is successfully done, the user's
      authentication on user's Maestro will be automatically done
      through public-key. In practical terms it means the user will no
      longer need to type the password to connect to that Maestro
      through GêBR. Analogous behaviour occurs in the connection
      between GêBR-Maestro and GêBR-Server.
    </para>

    <figure>
      <title>GêBR public-key authentication</title>
      <mediaobject>
        <caption>Suppose a client wants to establish a connection
          with a Maestro. The client is requested for login
          credential, but instead it provides the key associated to
          the Maestro. The Maestro try to match the client key with
          one of his own public keys. In positive case, the client
          is allowed to communicate to that Maestro. Otherwise, it
          requests for the user's password.</caption>
        <imageobject>
          <imagedata fileref="../images/GeBR_public_key_diagram.png" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Alternatively, the user can create the private/public key pair
      by himself (consult <link xlink:show="new"
      xlink:href="https://help.ubuntu.com/community/SSH/OpenSSH/Keys">here</link>
      for more information).
    </para>

  </section>

  <section xml:id="remote_browsing">
    <title>Accessing remote files</title>

    <para>GêBR infrastructure comprises GêBR, Maestro and working
      machines as main actors (see
      <xref linkend="intercommunication_between_players"/>) and the
      processing files, therefore, may be on different machines than
      yours.
    </para>
    <para>For most of the places the user can pick a file (see window
      below), the user will be navigating through the Servers files.
    </para>
    <para>In two places of GêBR, the user will not be browsing in the
      Servers filesystem: <emphasis>Import/Export</emphasis> of
      Projects, Lines or Flows. On these cases the user may, for example,
      keep a backup of your Projects/Lines/Flows on his/her home computer
      and, therefore, these files are kept on user's computer filesystem
      (instead of on GêBR-server).
    </para>
    <figure>
      <title>Remote browsing of files</title>
      <mediaobject>
	<imageobject>
	  <imagedata fileref="../images/GeBR_flow_editor_remote_browsing.png" />
	</imageobject>
      </mediaobject>
      <caption>Example of remote browsing for an output file. Note the
      bookmarks on the <guilabel>Places</guilabel> panel.</caption>
    </figure>

    <para>GêBR puts markers (bookmarks) to the important folders of the Line in
      context (see <xref linkend="projects_lines_line_paths"/>), as the user
      can see in the left edge of the window above. They aim to
      facilitate the access to the files of the Line.
    </para>

    <note>
      <para>If the user opens an external file browser (say Nautilus), these
        bookmarks will appear there too. They disappear when GêBR is closed.</para>
    </note>
  </section>

  <section xml:id="flow_editor_multicores">
    <title>Multiple cores</title>
    <para>GêBR optimizes the execution of loops in multi-core
      working machines<indexterm><primary>Working machine</primary><secondary>multi-core</secondary></indexterm>.</para>

    <para>GêBR takes advantage of the multi-core feature of most of
      the recent machines. The execution of repetitive flows can be
      optimized by this resource. If the Flow has Loops and is
      parallelizable (given some criteria, shown below), then the user can
      adjust the execution's degree of performance based on the number
      of processors.</para>

    <para>To be considered parallelizable, besides having a loop, a
      Flow must achieve one, and just one, of these criteria:</para>
    <itemizedlist>
      <listitem>The Flow does not have an output file or, if the output file exists, it has to depend on the variable iter;</listitem>
      <listitem>The output of each step of the loop is not the input
        of any other step of the loop.</listitem>
    </itemizedlist>
    <para>
      The user can choose the amount of processors through an adjustment bar,
      accessible via
      <guiicon>
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../../common-images/gebr-speed-one-core.png"/>
          </imageobject>
        </inlinemediaobject>
      </guiicon>
      beside the Run button.
    </para>

    <figure>
      <title>Execution speed</title>
      <imagedata fileref="../images/GeBR_flow_editor_flow_exec_speed.png" />
      <caption>
	GêBR offers the possibility to adjust the execution
	settings. Through the slider, it is possible  instruct to
	GêBR to do not fragment the job, therefore using only one
	core, to fragment the job in such a way that all available
	cores will be used (100%), or even to fragment the job in a way
	that all cores get overloaded ( > 100%).
      </caption>
    </figure>
    <para>Each level of the adjustment bar corresponds to a a number
      of cores used by the job.</para>
    <note>
    <para>
      GêBR does not show this speedometer for non-parallelizable flows
      (it will just show the Priority of Execution).
    </para>
    </note>
  </section>

  <section xml:id="flow_editor_priority_execution">
    <title>Priority of execution</title>
    <para>Computers, nowadays, are multitasked, what means that
      multiple things can be done at the same time. When many tasks
      are executed at the same time, the computer can get overloaded
      and decrease its performance. Seismic processing, particularly,
      can exhaust the computer resources.</para>

    <para>GêBR has a feature that overcomes the issue of overloading
      due to multitasking, by enabling the execution of the Flows in
      a <emphasis>Low Priority</emphasis> state:</para>

    <figure>
      <title>Priority of Execution</title>
      <imagedata fileref="../images/GeBR_flow_editor_priority_execution.png" />
      <caption>
	GêBR offers two possibilities of priority of execution: Low
	and High Priority.
      </caption>
    </figure>
    <para>Two options are available: </para>
    <itemizedlist>
      <listitem>
        <para>
          Low priority (the Flow is going to wait its turn to execute
          and try not to overload the system).
        </para>
      </listitem>
      <listitem>
        <para>
          High priority (the execution of the Flow is going to dispute
          for the computer resources with the other active programs).
        </para>
      </listitem>
    </itemizedlist>
    <para>Technically, when running in "Low Priority" mode, GêBR will
      reduce the run priority of the task, meaning it will tell the
      computer that "it can wait more important things to be done".
      This is the case when the user has other things to do while waits
      the calculations to be done.  The "High Priority" mode means
      GêBR will use greater run priority for the task, and that
      implies it will act as a foreground process, demanding more
      resources. It's the "I need this done now" mode, when the user needs the
      job to be finished as soon as possible, and the user doesn't care if it
      will fight for resources with other programs.</para>

    <para>If GêBR is the only program executing on the machine, i.e.,
      it doesn't have a challenger for the computer resources, then
      both states corresponds to the same situation.  This is the
      "nightly job" situation, when (theoretically) no one is using
      the machines and some jobs are left to be done for the next
      morning.</para>
  </section>

  <section
    xml:id="dictionary_variables">
    <title>Dictionary of variables</title>
    
    <para>It is usual in the course of processing a data that many
      flows depend on some fundamental quantities, like acquisition
      parameters, for example. Those quantities may be provided
      explicitly to each flow. Consider however a scenario where one
      or some of those quantities have to be redefined. The user would
      have to go through all flows which depend on them making the
      necessary updates. Despite possible, this procedure is error
      prone and time consuming. A better approach would be centralize
      the definition of those common quantities, in such a way that a
      change on them would be automatically propagated to all flows
      where they are employed. This central place for definition of
      quantities is the <emphasis role="bold">Dictionary of
      variables</emphasis><indexterm><primary>Dictionary of
      variables</primary></indexterm>.</para>

    <section xml:id="variables">
      <title>Variables</title>

      <para>The <guilabel>Dictionary of variables</guilabel> is an
      interface to handle all the variables. It is accessed through
      the icon
      <guiicon>
        <inlinemediaobject>
          <imageobject>
            <imagedata fileref="../../common-images/botao_dicionario_projeto.png"
            /></imageobject></inlinemediaobject></guiicon>, in the
            toolbars of the
      <guilabel>Projects and Lines</guilabel> and <guilabel>Flow
      Editor</guilabel> tabs.</para>

      <para>GêBR has three levels of organization (see
        <xref linkend="concepts_elements"/>).  The variables, thus,
        have three levels of visibility:</para>
      <itemizedlist>
        <listitem>Project's variables are visible to all Flows
          associated to Lines of the Project;</listitem>
        <listitem>Line's variables are visible to all its Flows;</listitem>
        <listitem>Flow's variables are just visible to itself.</listitem>
      </itemizedlist>
      
      <para>
        <figure>
          <title>Dictionary of variables</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="../images/GeBR_dictionary_variables_example.png" />
            </imageobject>
          </mediaobject>
          <caption>A variable with a value may be used with different
            metrics throughout the Flows. Creating a variable for each
            metric can help in this task. GêBR shows the computed
            value when the user passes the pointer over the icon
            <guiicon>
              <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="../../common-images/integer-icon.png" />
                </imageobject>
              </inlinemediaobject>
            </guiicon>. Note defining distance_cm depending on
            distance is valid because distance had been defined
            before.
          </caption>
        </figure>
      </para>

      <para>The dictionary validates the variables dynamically,
        revalidating them as soon as anything is changed in
        dictionary. Programs with errors are automatically revalidated
        too (see <xref linkend="flow_editor_change_state_program" />).
      </para>

      <para>If the <guilabel>Dictionary of variables</guilabel> finds
        an error among the variables, it is going to exhibit the icon
        <guiicon>
          <inlinemediaobject>
            <imageobject>
              <imagedata fileref="../../common-images/icone_nao_configurado.png" />
            </imageobject>
          </inlinemediaobject>
        </guiicon> and an explanation of the error.
      </para>

      <para>Besides using variables and expressions, the user can use some
        predefined functions:
      </para>

      <table>
        <title>Available functions</title>
        <tgroup cols='2'>
          <thead>
            <row>
              <entry>Function</entry>
              <entry>Sintax</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Square root</entry>
              <entry> sqrt(
                <emphasis>value</emphasis>)</entry>
            </row>
            <row>
              <entry>Sine</entry>
              <entry>s(
                <emphasis>value</emphasis>)</entry>
            </row>
            <row>
              <entry>Cosine</entry>
              <entry>c(
                <emphasis>value</emphasis>)</entry>
            </row>
            <row>
              <entry>Arctangent</entry>
              <entry>a(
                <emphasis>value</emphasis>)</entry>
            </row>
            <row>
              <entry>Natural Logarithm</entry>
              <entry>l(
                <emphasis>value</emphasis>)</entry>
            </row>
            <row>
              <entry>Exponencial</entry>
              <entry>e(
                <emphasis>value</emphasis>)</entry>
            </row>
            <row>
              <entry>Bessel</entry>
              <entry>j(
                <emphasis>order, value)</emphasis></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <tip>
      <para>Positioning the pointer on the icon of the
        variable type, the user can check the solved
        expression.</para>
    </tip>

    <tip>
      <para>The user can navigate over the fields using the keys 
        <keycap>Enter</keycap>, 
        <keycap>Tab</keycap> or with the 
        <mousebutton>Left button of the mouse</mousebutton>.
      </para>
    </tip>

    <tip>
      <para>To use the variables in fields like
        <guimenuitem>Text</guimenuitem>, the user must put the variable
        name embraced by square brackets
        <emphasis role="bold">[</emphasis> name-of-the-variable
        <emphasis role="bold">]</emphasis>.
      </para>
    </tip>

    <tip>
      <para>
        To see all the available variables for auto-completion, the user
        just need to type the
        character <emphasis role="bold">[</emphasis>' (open brackets).
      </para>
    </tip>

    <tip>
      <para>The user can reorder the dictionary variables by drag and
        drop. Since a variable can just use another variable above it,
        this feature turns the declaration of variables more flexible
        and dynamic.</para>
    </tip>

    <section xml:id="variavel_iter">
      <title>The variable iter</title>
      <para> GêBR allows the execution of repetitive procedures by 
        creating Flows with <guilabel>Loops</guilabel> (see 
        <xref linkend="flow_editor_loop" />). With <guilabel>Loops</guilabel>,
        the user has access to a special variable
        called <emphasis role="bold">iter</emphasis>.
      </para>

      <para>Upon execution, the user might want to identify what is the current
        step of the Loop. The iter variable is devised with this aim.
      </para>

      <para>
        For instance, the user can throw the ouput of each step of the Loop 
        to a file with a name identified by the step, 
        output-<emphasis>&lt;number-of-steps&gt;</emphasis> (see 
        <xref linkend="fig_flow_editor_loop_output"/>).</para>

      <figure xml:id="fig_flow_editor_loop_output">
        <title>Usage of iter variable</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../images/GeBR_flow_editor_loop_output.png" />
          </imageobject>
        </mediaobject>
        <caption>This Flow with a Loop program and number of loops
          equal to 3, is going to throw the results to three
          different files, identified by the step of the loop
          (output-1, output-2 and output-3).
        </caption>
      </figure>

    </section>
  </section>

  <section xml:id="additional_features_mpi_support">
    <title>Support to MPI programs</title>

    <para>Some programs, known as <emphasis>parallel
	programs</emphasis><indexterm><primary>Program</primary><secondary>parallel</secondary></indexterm>,
	deal themselves with the distribution of their computations
	among many working machines. In this way, those programs are
	much more efficient, exploit all available resources to run
	faster. Technically, they employ a infrastructure known
	as <emphasis>MPI</emphasis><indexterm><primary>MPI</primary></indexterm>. GêBR
	supports parallel programs.
    </para>

    <para>There are many implementations (flavors) of
      MPI<indexterm><primary>MPI</primary></indexterm>, but the most
      widely used are
      OpenMPI<indexterm><primary>MPI</primary><secondary>OpenMPI</secondary></indexterm>
      and
      MPICH2<indexterm><primary>MPI</primary><secondary>MPICH2</secondary></indexterm>. OpenMPI
      is an open source implementation and has influence of three
      earlier approaches: FT-MPI, LA-MPI and LAM/MPI. The MPICH2 is
      another widely used implementation and is based on the MPI-2.2
      standard.
    </para>

    <para>GêBR supports <emphasis>both OpenMPI and MPICH2</emphasis>. However, MPI
      programs can only run on servers that support the execution of
      MPI. Thus, for GêBR support of MPI, the user must have acces to
      servers/clusters that also support it.
    </para>

		<para>In the Maestro/Server Interface, in the MPI column, an icon
      indicates whether the working machine supports MPI. Roll over
      the icon to check the flavors of MPI available on that
      machine. The user will be able to run parallell program just on
      machines that support the same flavor as the one used in the
      program.
    </para>

    <figure>
      <title>Indication of MPI availability</title>
      <imagedata fileref="../images/GeBR_servers_mpi.png" />
      <caption>The second column indicates the types (flavors) of MPI
	available in the servers.</caption>
    </figure>
    
    <para>To run an MPI program, the user must first create a menu in DêBR
      and choose the proper MPI implementation to the
      program. Then import it in GêBR. In the Flow Editor tab, if the user
      double-click over the MPI program, he/she will be able to set the
      number of processes to be used by that MPI call.
    </para>

    <figure>
      <title>MPI settings</title>
      <imagedata fileref="../images/GeBR_programs_mpi_parameters.png" />
      <caption>Double clicking over an MPI program the user can set
	the <emphasis>number of process</emphasis> parameter of
	MPI.</caption>
    </figure>

  </section>

<!--
  <section xml:id="execution_log">
    <title>The execution log</title>

    <para>GêBR remembers most of the users actions, as well as the
      results of these actions, in the <emphasis>execution
      log</emphasis>. This log is shown at the bottom of the main
      window, which can be presented in the collapsed form (default)
      or the expanded form like the window below.</para>

    <figure>
      <mediaobject>
        <caption>At the bottom of GêBR's main window the user will find the
          execution log, which displays information on all of GêBR
          processes.</caption>
        <imageobject>
          <imagedata fileref="../images/janela_log_execucao.png" />
        </imageobject>
      </mediaobject>
    </figure>

    <tip>
      <para>In 
        <menuchoice>
          <guimenu>Actions</guimenu>
          <guimenuitem>Preferences</guimenuitem>
        </menuchoice> at the bottom of the dialog box, the user can see the box 
        <guilabel>Load past-execution log</guilabel>. By checking this
        box the user chooses to exhibit the whole log, including actions from
        past dates. By leaving the box unchecked the user chooses to have a
        compact log, which only shows actions that have taken place
        since GêBR's last initialization.</para>
    </tip>

  </section>
-->

  <section xml:id="import_samples">
    <title>Sample projects</title>
    <para>In <menuchoice>
        <guimenu>Help</guimenu>
        <guimenuitem>Samples</guimenuitem>
      </menuchoice> menu, the user can import available samples (see
      figure below).</para>

    <figure>
      <title>Sample projects in <menuchoice>
          <guimenu>Help</guimenu>
          <guimenuitem>Samples</guimenuitem>
      </menuchoice></title>
      <mediaobject>
        <caption>Screenshot of the Samples Menu.</caption>
        <imageobject>
          <imagedata fileref="../images/samples_en.png" />
        </imageobject>
      </mediaobject>
    </figure>
  </section>
</chapter>
