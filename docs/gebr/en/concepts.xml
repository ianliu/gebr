<?xml version="1.0" encoding="utf-8"?>

<chapter
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  lang="en"
  version="5.0"
  xml:id="overview">
  
  <title>Concepts</title>

  <section xml:id="concepts_elements">
    <title>Projects, lines and flows</title>
    
    <para>The processing of a seismic data is carried out
      by <emphasis>processing
      flows</emphasis><indexterm><primary>Processing
      flow</primary></indexterm>. A processing flow is a chain of
      programs, which sequentially operates on an input data to
      produce an output data from it. For example, processing flows
      can be assembled to accomplish tasks like <emphasis>spike
      deconvolution</emphasis>, <emphasis>ground-roll
      atenuation</emphasis>, <emphasis>NMO correction</emphasis>, and
      so on.</para>

    <para>In GêBR, processing flows are referenced
      as <emphasis role="bold">flows</emphasis><indexterm><primary>Flow</primary></indexterm>. The
      complete processing of a seismic data (also known as
      a <emphasis>seismic line</emphasis>, in 2D case) involves
      several processing flows. The set of processing flows is
      referenced as
      a <emphasis role="bold">line</emphasis><indexterm><primary>Line</primary></indexterm>
      in the GêBR interface. Furthermore, it is common to have many
      seismic lines acquired on a target area. A set of seismic lines
      is known as a <emphasis role="bold">project</emphasis><indexterm><primary>Project</primary></indexterm>, in
      GêBR.</para>

    <para>In summary, GêBR has three levels organization, from top to
    bottom:</para>
    <itemizedlist>
      <listitem>
	<para>
          <emphasis role="bold">Project</emphasis>: It is a set of
          <emphasis role="bold">lines</emphasis>. A project has only few
	  basic information and is used to cluster lines related
	  somehow.</para>
      </listitem>
      <listitem>
	<para>
          <emphasis role="bold">Line</emphasis>: It is a set of 
          <emphasis role="bold">flows</emphasis>. During the setup of
          the Line, some important choices have to be made, mainly
          concerning the organization of the <emphasis>processing
            products</emphasis> (intermediate data, figures, tables, etc)
          produced during the processing of a seismic line.
	</para>
      </listitem>
      <listitem>
	<para>
	  <emphasis role="bold">Flow</emphasis>: It is a sequence of
	  programs, designed to accomplish a specific task, in the
	  course of the processing the seismic data.
	</para>
      </listitem>
    </itemizedlist>

    <para>
      Thus, before creating and executing flows, it's necessary to create
      at least one Project owning one
      line. <xref linkend="projects_lines_create_projects"/>,
      <xref linkend="projects_lines_create_lines"/> and
      <xref linkend="flows_create_flow"/> explain how this is
      accomplished.
    </para>

    <para>To assemble a flow, the user has not only to select
      programs, but also configure them properly, through their
      parameters. Once the flow is ready, it is time to actually
      execute it.</para>
  </section>

  <section xml:id="concepts_programs_and_menus">
    <title>Menus, programs and their parameters</title>

    <para>A flow is a sequence of programs, as just explained. In
      GêBR, the user might think that there is a list of available
      programs to assemble flows. This is partially true only. Indeed,
      flows are built from <emphasis role="bold">menus</emphasis><indexterm><primary>Menu</primary></indexterm>. But
      what is a menu?</para>

    <para>A <emphasis role="bold">menu</emphasis> is a representation
      of a single
      program<indexterm><primary>Program</primary></indexterm> or a
      set of programs. This means that when a menu is added to a
      flow one or more programs might be inserted into the
      flow at once. Why is that so? Think about common tasks that are
      accomplished by a standard sequence of programs. Instead of
      building a flow by adding programs one by one, the flow could be
      built from a menu, which packs the whole set of programs. For
      example, consider the task of adding header to a raw data to
      come up with a seismic data in Seismic Unix
      format. <xref linkend="program_versus_menu" /> shows two
      possibilities to assemble the same flow, depending on how the
      programs <emphasis>SU Add Header</emphasis> and <emphasis>SU Set
      Header</emphasis> are represented, either as two independent
      menus or as one menu encapsulating both programs.</para>

    <figure id="program_versus_menu">
      <title>Add header flows</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="../images/menu.png" contentwidth="506px" contentdepth="93px" />
        </imageobject>
      </mediaobject>
      <mediaobject>
        <imageobject>
          <imagedata fileref="../images/menu2.png" contentwidth="504px" contentdepth="93px" />
        </imageobject>
      </mediaobject>
      <caption>A common flow to add header to a raw data is built by sequencing
        <emphasis>SU Add Header</emphasis> and <emphasis>SU Set
          Header</emphasis>. The top image represents the flow built from two
        menus, one for <emphasis>SU Add Header</emphasis> and another for
        <emphasis>SU Set Header</emphasis>. The bottom one represents the same
        flow, but built from only one menu, that encapsulates both
        programs.</caption>
    </figure>

    <note>
      <para>Even when a menu represents more than one program, at the moment
        the menu is added to the flow, all programs which comprises it are
        added independently to the flow. This means that resulting flow will be
        the same, no matter how the programs have been added, at once or one by
        one.</para>
    </note>

    <para>After assembling the flow, to complete its set up, the user
      has to inspect each program of the flow and define its
      parameters. Programs may depend on many parameters, from a
      variety of types. GêBR support
      parameters<indexterm><primary>Parameters</primary><secondary>supported
      types of</secondary></indexterm> of the following types:</para>
    <itemizedlist>
      <listitem>Numeric</listitem>
      <listitem>Text</listitem>
      <listitem>Booleans</listitem>
      <listitem>Files</listitem>
      <listitem>List of options</listitem>
    </itemizedlist>

    <tip>
      <para>GêBR supports arithmetic expressions to define numeric parameters,
        and text concatenation for text parameters. Besides, it is possible to
        define quantities and operate with them to set up parameters of the
        programs.</para>
    </tip>

  </section>

  <section xml:id="concepts_connections">
    <title>GêBR players</title>

    <para>The GêBR set of tools is composed by three main player
      categories: <emphasis role="bold">GêBR</emphasis><indexterm><primary>GêBR</primary><secondary>the
      interface</secondary></indexterm> (the interface
    	itself), <emphasis role="bold">maestros</emphasis>
	    <indexterm><primary>Maestro</primary></indexterm>,
      and <emphasis role="bold">nodes
      </emphasis><indexterm><primary>Node
      </primary></indexterm>. But who are those guys?</para>

    <para>The GêBR interface, sometimes referred as GêBR only, is the graphical
      interface with whom the user interacts with to build processing flows,
      execute them, inspect results, etc. Usually, this interface is installed
      and is running in the machine user has physical contatct with.</para>

    <para>Through GêBR, it is possible to take advantage of as many machines as
      the user has access to run processing flows. Those machines are
      referenced as <emphasis role="bold">nodes</emphasis>. They may be
      local, meaning the user is physically using them, or remote, meaning the
      user has access to them through the network. No matter where the machines
      are, they are equally treated by GêBR, which means that the user does not
      have to care about that.</para>

    <para>However, GêBR does not talk directly to the nodes.  This
      communication intermediated through another player, the
      <emphasis role="bold">maestro</emphasis><indexterm><primary>Maestro</primary></indexterm>.
      It acts as a coordinator of the nodes, collecting information and ranking
      them according to their capabilities and availabities of resources.
      Therefore, maestro can take smart decisions about which machines are best
      suited to run the job.</para>

    <figure xml:id="communication_diagram">
      <title>Communication layout between GêBR players</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="../images/gebr-connections.png" contentwidth="669px" contentdepth="272px" />
        </imageobject>
      </mediaobject>
      <caption>All communitation between GêBR and the nodes are intermediated
        by the maestro.</caption>
    </figure>
  
    <para>The nodes put their computational power at disposal of the maestro.
      Under maestro's coordination the nodes can even cooperate to conclude
      processing jobs fasters.</para>
 
   <para>When the user decides to execute a flow, GêBR sends this request to
     the maestro, giving rise to a
     <emphasis role="bold">job</emphasis><indexterm><primary>Job</primary></indexterm>.
     However, the maestro does not execute the job itself, it dispatches the
     job to some of the nodes under its control. All the information generated
     by the job is collected and sent back to GêBR, where they are presented to
     the user.</para>

   <para>This communication process, despite complex, is completely transparent
     to the user, which can concentrate on processing seismic data, leaving all
     technical details to GêBR.</para>
  </section>
    
  <section xml:id="concepts_gebr_gui_layout">
    <title>GêBR interface layout</title>

    <para>
      The GêBR interface is intentionally simple. It is organized in three main
      tabs:
      <itemizedlist>
        <listitem>
          <guilabel>Projects and Lines</guilabel>: for creating and
          manipulating Projects and Lines;
        </listitem>
        <listitem>
          <guilabel>Flows</guilabel>: for creating, editing and executing
          Flows;
        </listitem>
        <listitem>
          <guilabel>Jobs</guilabel>: for inspecting the results.
        </listitem>
      </itemizedlist>

      <!--
      <figure>
        <mediaobject>
          <caption>GêBR tabs.</caption>
          <imageobject>
            <imagedata fileref="../images/GeBR_tabs.png" contentwidth="706px" contentdepth="456px" />
          </imageobject>
        </mediaobject>
      </figure>
      -->
    </para>
    
    <para>
      There are also additional resources in menu bar, on the top of the
      window:
      <itemizedlist>
        <listitem>
          Actions
          <itemizedlist>
            <listitem>
              <guilabel>Preferences</guilabel>: User preferences;
            </listitem>
            <listitem>
              <guilabel>Connections Assistant</guilabel>: Step-by-step
              guided setup of the main connections performed by GêBR;
            </listitem>
            <listitem>
              <guilabel>Maestro/Nodes</guilabel>: Configuration of
              maestro, nodes and groups of nodes;
            </listitem>
            <listitem>
              <guilabel>Quit</guilabel>: Quits GêBR.
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          Help 
          <itemizedlist>
            <listitem>
              <guilabel>Help</guilabel>: This documentation;
            </listitem>
            <listitem>
              <guilabel>Examples</guilabel>: Examples of seismic processing;
            </listitem>
            <listitem>
              <guilabel>About</guilabel>: GêBR's version, license and
              staff information.
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </para>
    <!--
    <figure>
      <mediaobject>
        <caption>GêBR's menus bar</caption>
        <imageobject>
          <imagedata fileref="../images/GeBR_menubar.png" contentwidth="706px" contentdepth="456px" />
        </imageobject>
      </mediaobject>
    </figure>
    -->
    </section>
</chapter>
