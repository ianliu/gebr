/** @file cmdline.h
 *  @brief The header file for the gebr_command line option parser
 *  generated by GNU Gengetopt version 2.22
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name */
#define CMDLINE_PARSER_PACKAGE "GÍBR"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "1.0"
#endif

/** @brief Where the gebr_command line options are stored */
struct ggopt
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * name_arg;	/**< @brief User name.  */
  char * name_orig;	/**< @brief User name original value given at gebr_command line.  */
  const char *name_help; /**< @brief User name help description.  */
  char * email_arg;	/**< @brief User email.  */
  char * email_orig;	/**< @brief User email original value given at gebr_command line.  */
  const char *email_help; /**< @brief User email help description.  */
  char * usermenus_arg;	/**< @brief User local menus dir.  */
  char * usermenus_orig;	/**< @brief User local menus dir original value given at gebr_command line.  */
  const char *usermenus_help; /**< @brief User local menus dir help description.  */
  char * data_arg;	/**< @brief Data user dir.  */
  char * data_orig;	/**< @brief Data user dir original value given at gebr_command line.  */
  const char *data_help; /**< @brief Data user dir help description.  */
  char * editor_arg;	/**< @brief HTML capable editor.  */
  char * editor_orig;	/**< @brief HTML capable editor original value given at gebr_command line.  */
  const char *editor_help; /**< @brief HTML capable editor help description.  */
  char * browser_arg;	/**< @brief HTML browser.  */
  char * browser_orig;	/**< @brief HTML browser original value given at gebr_command line.  */
  const char *browser_help; /**< @brief HTML browser help description.  */
  int width_arg;	/**< @brief Window width (default='700').  */
  char * width_orig;	/**< @brief Window width original value given at gebr_command line.  */
  const char *width_help; /**< @brief Window width help description.  */
  int height_arg;	/**< @brief Window height (default='400').  */
  char * height_orig;	/**< @brief Window height original value given at gebr_command line.  */
  const char *height_help; /**< @brief Window height help description.  */
  int logexpand_flag;	/**< @brief Log exapander state (default=off).  */
  const char *logexpand_help; /**< @brief Log exapander state help description.  */
  char ** server_arg;	/**< @brief Server hostname.  */
  char ** server_orig;	/**< @brief Server hostname original value given at gebr_command line.  */
  int server_min; /**< @brief Server hostname's minimum occurreces */
  int server_max; /**< @brief Server hostname's maximum occurreces */
  const char *server_help; /**< @brief Server hostname help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int name_given ;	/**< @brief Whether name was given.  */
  unsigned int email_given ;	/**< @brief Whether email was given.  */
  unsigned int usermenus_given ;	/**< @brief Whether usermenus was given.  */
  unsigned int data_given ;	/**< @brief Whether data was given.  */
  unsigned int editor_given ;	/**< @brief Whether editor was given.  */
  unsigned int browser_given ;	/**< @brief Whether browser was given.  */
  unsigned int width_given ;	/**< @brief Whether width was given.  */
  unsigned int height_given ;	/**< @brief Whether height was given.  */
  unsigned int logexpand_given ;	/**< @brief Whether logexpand was given.  */
  unsigned int server_given ;	/**< @brief Whether server was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure ggopt (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure ggopt (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *ggopt_purpose;
/** @brief the usage string of the program */
extern const char *ggopt_usage;
/** @brief all the lines making the help output */
extern const char *ggopt_help[];

/**
 * The gebr_command line parser
 * @param argc the number of gebr_command line options
 * @param argv the gebr_command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char * const *argv,
  struct ggopt *args_info);

/**
 * The gebr_command line parser (version with additional parameters - deprecated)
 * @param argc the number of gebr_command line options
 * @param argv the gebr_command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char * const *argv,
  struct ggopt *args_info,
  int override, int initialize, int check_required);

/**
 * The gebr_command line parser (version with additional parameters)
 * @param argc the number of gebr_command line options
 * @param argv the gebr_command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char * const *argv,
  struct ggopt *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct ggopt *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct ggopt *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed ggopt structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct ggopt *args_info);
/**
 * Deallocates the string fields of the ggopt structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct ggopt *args_info);

/**
 * The config file parser (deprecated version)
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_config_file() instead
 */
int cmdline_parser_configfile (char * const filename,
  struct ggopt *args_info,
  int override, int initialize, int check_required);

/**
 * The config file parser
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_config_file (char * const filename,
  struct ggopt *args_info,
  struct cmdline_parser_params *params);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct ggopt *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
