<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<flow version="0.1.0">
  <filename>suaddnoise.mnu</filename>
  <title>SU Add Noise</title>
  <description>add noise to traces</description>
  <help><![CDATA[
    <html>
    <header>
       <title>SU Add Noise</title>
    </header>
    <body>
    <h1>SU Add Noise</h1>
    <p>Add noise to traces</p>
    </body>
    </html>
    ]]>
  </help>
  <author>GÃªBR core team</author>
  <email>gebr@users.sf.net</email>
  <category>Editing, Sorting and Manipulation</category>
  <category>Seismic Unix</category>
  <io><input /><output /><error /></io>
  <program stdin="yes" stdout="yes" stderr="yes" status="unconfigured">
    <menu index="0">suaddnoise.mnu</menu>
    <title>SU Add Noise</title>
    <binary>suaddnoise</binary>
    <description>add noise to traces</description>
    <help><![CDATA[<pre>
 SUADDNOISE - add noise to traces

 suaddnoise &lt;stdin &gt;stdout  sn=20  noise=gauss  seed=from_clock

 Required parameters:
 	if any of f=f1,f2,... and amp=a1,a2,... are specified by the user
	and if dt is not set in header, then dt is mandatory

 Optional parameters:
 	sn=20			signal to noise ratio
 	noise=gauss		noise probability distribution
 				=flat for uniform; default Gaussian
 	seed=from_clock		random number seed (integer)
	f=f1,f2,...		array of filter frequencies (as in sufilter)
	amps=a1,a2,...		array of filter amplitudes
 	dt= (from header)	time sampling interval (sec)
	verbose=0		=1 for echoing useful information

 	tmpdir=	 if non-empty, use the value as a directory path
		 prefix for storing temporary files; else if the
	         the CWP_TMPDIR environment variable is set use
	         its value for the path; else use tmpfile()

 Notes:
 Output = Signal +  scale * Noise

 scale = (1/sn) * (absmax_signal/sqrt(2))/sqrt(energy_per_sample)

 If the signal is already band-limited, f=f1,f2,... and amps=a1,a2,...
 can be used, as in sufilter, to bandlimit the noise traces to match
 the signal band prior to computing the scale defined above.

 Examples of noise bandlimiting:
 low freqency:    suaddnoise &lt; data f=40,50 amps=1,0 | ...
 high freqency:   suaddnoise &lt; data f=40,50 amps=0,1 | ...
 near monochromatic: suaddnoise &lt; data f=30,40,50 amps=0,1,0 | ...
 with a notch:    suaddnoise &lt; data f=30,40,50 amps=1,0,1 | ...
 bandlimited:     suaddnoise &lt; data f=20,30,40,50 amps=0,1,1,0 | ...
      </pre>]]>
    </help>
    <parameters>
      <float required="no">
	<keyword>sn=</keyword>
	<label>signal to noise ratio</label>
	<value></value>
      </float>
      <flag>
	<keyword>noise=flat</keyword>
	<label>Flat noise probability distribution</label>
	<state default="off"></state>
      </flag>
      <int required="no">
	<keyword>seed=</keyword>
	<label>random number seed</label>
	<value></value>
      </int>
      <string required="no">
	<keyword>f=</keyword>
	<label>array of filter frequencies (as in sufilter)</label>
	<value></value>
      </string>
      <string required="no">
	<keyword>amps=</keyword>
	<label>array of filter amplitudes</label>
	<value></value>
      </string>
      <float required="no">
	<keyword>dt=</keyword>
	<label>time sampling interval (in sec)</label>
	<value></value>
      </float>
      <flag>
	<keyword>verbose=1</keyword>
	<label>echoing useful information</label>
	<state default="off"></state>
      </flag>
      <file directory="yes" required="no">
	<keyword>tmpdir=</keyword>
	<label>directory path to temporary files</label>
	<value></value>
      </file>
    </parameters>
  </program>
</flow>
